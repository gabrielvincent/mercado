package stats

import (
	l "mercado/app/views/layouts"
	utils "mercado/utils"
	stringsUtils "mercado/utils/strings"
	expense "mercado/app/models/expense"
	stats "mercado/app/models/stats"
	"time"
	"strconv"
	"github.com/goodsign/monday"
)

func daysInMonth(year, month int) int {
	lastDay := time.Date(year, time.Month(month)+1, 0, 0, 0, 0, 0, time.UTC).Day()
	return lastDay
}

func getCurrentDayOfMonth() int {
	now := time.Now()
	return now.Day()
}

templ Semibold() {
	<span class="font-semibold">
		{ children... }
	</span>
}

templ Currency(value int) {
	@Semibold() {
		{ stringsUtils.FormatCurrency(value) }
	}
}

type PreviousMonthCompareInfoProps struct {
	prevMonthCompare *stats.PeriodComparison
	spent            stats.ComparisonMetric[int]
	sessions         stats.ComparisonMetric[int]
}

templ RenderPreviousMonthCompare(props PreviousMonthCompareInfoProps, expenses []expense.Expense) {
	<h1 class="text-gray-800 mb-2">Compara√ß√£o com o mesmo per√≠odo no m√™s anterior:</h1>
	<section class="bg-gray-100 p-3 rounded-lg">
		<div class="grid grid-cols-3 gap-2 items-center ">
			<div></div>
			<div>
				<span class="text-gray-600">Esse m√™s</span>
			</div>
			<div>
				<span class="text-gray-600">M√™s passado</span>
			</div>
			<div>
				<span class="text-gray-700">Gasto</span>
			</div>
			<div class="font-bold text-gray-900">
				{ stringsUtils.FormatCurrency(props.spent.TargetValue) }
			</div>
			<div class="font-bold text-gray-600">
				{ stringsUtils.FormatCurrency(props.spent.CompareValue) }
			</div>
			<div>
				<span class="text-gray-700">Idas</span>
			</div>
			<div class="font-bold text-gray-900">
				{ strconv.Itoa(props.sessions.TargetValue) } vezes
			</div>
			<div class="font-bold text-gray-600">
				{ strconv.Itoa(props.sessions.CompareValue) } vezes
			</div>
		</div>
	</section>
}

func PreviousMonthCompare(prevMonthCompare *stats.PeriodComparison) templ.Component {
	props := PreviousMonthCompareInfoProps{
		prevMonthCompare: prevMonthCompare,
		spent:            prevMonthCompare.Metrics["Spent"].(stats.ComparisonMetric[int]),
		sessions:         prevMonthCompare.Metrics["Sessions"].(stats.ComparisonMetric[int]),
	}
	return RenderPreviousMonthCompare(props, []expense.Expense{})
}

var isFirst = true

script loadDeferred(id string) {
    loadDeferredComponent(id)
}

templ DeferredComponent(id string, completed bool, children ...any) {
	<div
		data-defer-id={ id }
		data-defer-completed={ strconv.FormatBool(completed) }
	>
		{ children... }
	</div>
	@loadDeferred(id)
}

templ GroceryStoresRanking(ranking []expense.GroceryStoresRankingItem) {
	@DeferredComponent("grocery-stores-ranking", true) {
		O mercado que voc√™ mais visitou foi o{ " " }
		@Semibold() {
			{ ranking[0].GroceryStore }.
		}
		Voc√™ l√° esteve{ " " }
		@Semibold() {
			{ strconv.Itoa(ranking[0].Sessions) }
		}
		{ " " }vezes. O ranking √© esse aqui:
		<div
			class="mt-2 p-3 bg-gray-100 rounded-lg"
		>
			for i, item := range ranking {
				<div class="flex items-center gap-2">
					<span>
						switch i {
							case 0:
								ü•á
							case 1:
								ü•à
							case 2:
								ü•â
							case 3:
								4Ô∏è‚É£
							case 4:
								5Ô∏è‚É£
							case 5:
								6Ô∏è‚É£
							case 6:
								7Ô∏è‚É£
							case 7:
								8Ô∏è‚É£
							case 8:
								9Ô∏è‚É£
							case 9:
								üîü
							default:
								{ "- " }
						}
					</span>
					<div class="w-full flex items-center justify-between">
						<span
							class={ "font-semibold",
                            templ.KV("text-amber-400", i == 0),
                            templ.KV("text-stone-400", i == 1),
                            templ.KV("text-orange-400", i == 2) }
						>
							{ item.GroceryStore }
						</span>
						<span>
							({ strconv.Itoa(item.Sessions) }
							if item.Sessions > 1 {
								{ " " }visitas)
							} else {
								{ " " }visita)
							}
						</span>
					</div>
				</div>
			}
		</div>
	}
}

func formatLocaleDate(date time.Time) string {
	return monday.Format(date, "January 2006", monday.LocalePtBR)
}

type PreviousMonthProps struct {
	spent    stats.ComparisonMetric[int]
	sessions stats.ComparisonMetric[int]
}

func getMomCompare(ctx context.Context) stats.PeriodComparison {
	return ctx.Value("momCompare").(stats.PeriodComparison)
}

templ RenderPreviousMonth() {
	@l.Layout() {
		<div class="p-4">
			<p>
				Total Gasto:{ " " }
			</p>
		</div>
	}
}

func PreviousMonth() templ.Component {
	return RenderPreviousMonth()
}

templ CurrentMonth(
	date time.Time, expenses []expense.Expense,
	prevMonthCompare *stats.PeriodComparison,
	ranking []expense.GroceryStoresRankingItem,
) {
	<h2>{ formatLocaleDate(date) }</h2>
	<h1 class="font-bold text-lg mb-4">Ol√°, { ctx.Value("name").(string) },</h1>
	<p>
		hoje √© o 
		<span class="font-semibold">{ strconv.Itoa(getCurrentDayOfMonth()) }¬∫</span>
		dia do m√™s e voc√™ j√° gastou
		<span>
			@Currency(expense.CalcTotal(expenses))
		</span>.
		At√© agora, voc√™ gastou em m√©dia 
		@Currency(int(expense.CalcAvg(expenses)))
		{ " " }a cada ida ao mercado (foram j√° <span class="font-semibold">{ strconv.Itoa(len(expenses)) }</span>
		if len(expenses) > 1 {
			vezes,
		} else {
			vez,
		}
		uma m√©dia de
		<span class="font-semibold">{ strconv.FormatFloat(float64(len(expenses)) / float64(getCurrentDayOfMonth()) , 'f', 2, 64) }</span>
		idas ao mercado por dia, o que d√° uma m√©dia de
		<span class="font-semibold">
			@Currency(int(float64(expense.CalcTotal(expenses)) / float64(getCurrentDayOfMonth())))
		</span> gastos por dia!)
		Voc√™ acha bonita uma coisa dessas?
	</p>
	if prevMonthCompare != nil {
		<p class="mt-4">
			@PreviousMonthCompare(prevMonthCompare)
		</p>
	}
	<p class="mt-4">
		@GroceryStoresRanking(ranking)
	</p>
}

templ InfoTile(title string, displayValue string) {
	<div class="flex flex-col items-center gap-2">
		<span class="text-3xl font-semibold">
			{ displayValue }
		</span>
		<span class="text-center">{ title }</span>
	</div>
}

type PastMonthProps struct {
	date                 time.Time
	totalSpent           int
	totalSessions        int
	avgSpentPerDay       float64
	avgSessionsPerDay    float64
	avgSpentPerSession   float64
	expensesMedian       float64
	expensesStdDeviation float64
}

templ RenderPastMonth(props PastMonthProps) {
	<h2>{ formatLocaleDate(props.date) }</h2>
	<div class="grid grid-cols-2 gap-12 mt-8">
		<div>
			@InfoTile("Total Gasto", stringsUtils.FormatCurrency(props.totalSpent))
		</div>
		<div>
			@InfoTile("Idas ao mercado", strconv.Itoa(props.totalSessions))
		</div>
		<div>
			@InfoTile("M√©dia de gasto por ida ao mercado", stringsUtils.FormatCurrency(int(props.avgSpentPerSession)))
		</div>
		<div>
			@InfoTile("M√©dia de gasto por dia", stringsUtils.FormatCurrency(int(props.avgSpentPerDay)))
		</div>
		<div>
			@InfoTile("M√©dia de idas por dia", strconv.FormatFloat(props.avgSessionsPerDay, 'f', 2, 64))
		</div>
		<div>
			@InfoTile("Mediana dos gastos", stringsUtils.FormatCurrency(int(props.expensesMedian)))
		</div>
		<div>
			@InfoTile("Desvio padr√£o da m√©dia de gastos por ida ao mercado", strconv.FormatFloat(props.expensesStdDeviation/100.0, 'f', 2, 64))
		</div>
	</div>
}

func PastMonth(
	date time.Time,
	expenses []expense.Expense,
	prevMonthCompare *stats.PeriodComparison,
	ranking []expense.GroceryStoresRankingItem,
) templ.Component {
	daysInMonth := time.Date(
		date.Year(),
		date.Month()+1,
		0,
		23,
		59,
		59,
		0,
		time.UTC,
	).Day()
	totalSpent := expense.CalcTotal(expenses)
	totalSessions := len(expenses)

	expenseValues := make([]int, 0, totalSessions)
	for _, expense := range expenses {
		expenseValues = append(expenseValues, expense.Value)
	}

	expensesMedian := utils.CalcMedian(expenseValues)
	expensesStdDeviation := utils.CalcStandardDeviation(expenseValues)

	props := PastMonthProps{
		date:                 date,
		totalSpent:           totalSpent,
		totalSessions:        totalSessions,
		avgSpentPerDay:       float64(expense.CalcTotal(expenses)) / float64(daysInMonth),
		avgSessionsPerDay:    float64(totalSessions) / float64(daysInMonth),
		avgSpentPerSession:   float64(expense.CalcTotal(expenses)) / float64(totalSessions),
		expensesMedian:       expensesMedian,
		expensesStdDeviation: expensesStdDeviation,
	}

	return RenderPastMonth(props)
}

templ RenderIndex(
	date time.Time,
	expenses []expense.Expense,
	prevMonthCompare *stats.PeriodComparison,
	ranking []expense.GroceryStoresRankingItem,
) {
	@l.Layout() {
		<div class="p-4">
			switch ctx.Value("isCurrentMonth").(bool) {
				case true:
					@CurrentMonth(date, expenses, prevMonthCompare, ranking)
				case false:
					@PastMonth(date, expenses, prevMonthCompare, ranking)
			}
		</div>
	}
}

func Index(date time.Time, expenses []expense.Expense, prevMonthCompare *stats.PeriodComparison, ranking []expense.GroceryStoresRankingItem) templ.Component {

	return RenderIndex(date, expenses, prevMonthCompare, ranking)
}
